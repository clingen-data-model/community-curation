{"version":3,"sources":["webpack:///./node_modules/vue-loader/lib/runtime/componentNormalizer.js","webpack:///./node_modules/q/q.js"],"names":["normalizeComponent","scriptExports","render","staticRenderFns","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","hook","options","_compiled","functional","_scopeId","context","this","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","call","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","_injectStyles","originalRender","h","existing","beforeCreate","concat","exports","definition","bootstrap","module","hasStacks","Error","e","stack","qFileName","qStartingLine","captureLine","noop","nextTick","head","task","next","tail","flushing","requestTick","isNodeJS","laterQueue","flush","domain","enter","runSingle","length","pop","exit","setTimeout","process","toString","setImmediate","window","bind","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","runAfter","push","Function","uncurryThis","f","apply","arguments","QReturnValue","array_slice","Array","prototype","slice","array_reduce","reduce","callback","basis","index","TypeError","array_indexOf","indexOf","value","i","array_map","map","thisp","self","collect","undefined","object_create","Object","create","Type","object_defineProperty","defineProperty","obj","prop","descriptor","object_hasOwnProperty","hasOwnProperty","object_keys","keys","object","key","object_toString","isStopIteration","exception","ReturnValue","makeStackTraceLong","error","promise","stacks","p","source","__minimumStackCounter__","stackCounter","configurable","unshift","stackString","lines","split","desiredLines","line","isInternalFrame","stackLine","join","filterStackString","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qEndingLine","Q","Promise","isPromiseAlike","deferred","defer","then","resolve","reject","notify","coerce","fulfill","longStackSupport","longStackCounter","resolvedPromise","messages","progressListeners","promiseDispatch","op","operands","args","valueOf","nearerValue","nearer","isPromise","inspect","state","substring","become","newPromise","message","reason","progress","progressListener","resolver","race","answerPs","len","fallback","result","inspected","when","fulfilled","rejected","progressed","env","Q_DEBUG","makeNodeResolver","all","passByCopy","x","y","that","spread","makePromise","done","_fulfilled","newException","_rejected","newValue","threw","_progressed","onerror","tap","fcall","thenResolve","thenReject","isPending","isFulfilled","isRejected","name","alternative","unhandledReasons","unhandledRejections","reportedUnhandledRejections","trackUnhandledRejections","resetUnhandledRejections","rejection","at","emit","atReport","splice","untrackRejection","trackRejection","rhs","dispatch","promises","pendingCount","snapshot","any","prev","current","err","allResolved","getUnhandledReasons","stopUnhandledRejectionTracking","master","array","async","makeGenerator","continuer","verb","arg","StopIteration","generator","errback","spawn","promised","get","set","del","mapply","post","send","mcall","invoke","fapply","fbind","console","warn","allSettled","regardless","fail","fin","onUnhandledError","timeout","ms","timeoutId","code","clearTimeout","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","nodeify","nodeback","noConflict"],"mappings":"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","file":"js/modules/vendors~volunteer-detail.ab37ba1f713f944adbb6.js","sourcesContent":["/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent(\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */,\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options =\n    typeof scriptExports === 'function' ? scriptExports.options : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) {\n    // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () {\n          injectStyles.call(\n            this,\n            (options.functional ? this.parent : this).$root.$options.shadowRoot\n          )\n        }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functional component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection(h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.toString()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n                object_defineProperty(error, \"__minimumStackCounter__\", {value: p.stackCounter, configurable: true});\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        var stack = filterStackString(concatedStacks);\n        object_defineProperty(error, \"stack\", {value: stack, configurable: true});\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * The counter is used to determine the stopping point for building\n * long stack traces. In makeStackTraceLong we walk backwards through\n * the linked list of promises, only stacks which were created before\n * the rejection are concatenated.\n */\nvar longStackCounter = 1;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n            promise.stackCounter = longStackCounter++;\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n\n        if (Q.longStackSupport && hasStacks) {\n            // Only hold a reference to the new promise if long stacks\n            // are enabled to reduce memory usage\n            promise.source = newPromise;\n        }\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected(err) {\n            pendingCount--;\n            if (pendingCount === 0) {\n                var rejection = err || new Error(\"\" + err);\n\n                rejection.message = (\"Q can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected. Last error message: \" + rejection.message);\n\n                deferred.reject(rejection);\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n        throw new Error(\"Q can't apply finally callback\");\n    }\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    if (callback === undefined) {\n        throw new Error(\"Q can't wrap an undefined function\");\n    }\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n"],"sourceRoot":""}